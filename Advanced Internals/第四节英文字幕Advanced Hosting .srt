WEBVTT

0
00:00:00,110 --> 00:00:02,660
Hey there, welcome back to this video

1
00:00:02,720 --> 00:00:05,500
about ASP.NET Core, my name is Jeff Fritz,

2
00:00:05,560 --> 00:00:08,680
I'm Jon Galloway. And we've been
talking a lot in these videos about

3
00:00:08,750 --> 00:00:11,160
building new applications and what we

4
00:00:11,260 --> 00:00:12,690
can do with them and then we even got

5
00:00:12,750 --> 00:00:13,770
into talking a little bit about

6
00:00:13,880 --> 00:00:16,070
production and different environments.

7
00:00:16,160 --> 00:00:19,040
How do I host this? This stuff if I want to

8
00:00:19,100 --> 00:00:23,390
actually publish it and put it
somewhere in a production space Jon.

9
00:00:23,480 --> 00:00:25,590
Yeah, it's a great question and it's--

10
00:00:25,660 --> 00:00:29,130
there's a lot of information,
a lot of it like nuances to this right

11
00:00:29,230 --> 00:00:34,460
deploying has gotten a
little more complicated because

12
00:00:34,520 --> 00:00:38,090
ASP.NET Core runs everywhere
yeah, so you have to think about

13
00:00:38,200 --> 00:00:41,260
you know how is
your application actually hosted

14
00:00:41,360 --> 00:00:44,360
and how are-- you know
where are you deploying it to

15
00:00:44,430 --> 00:00:47,600
and the slight differences
between the places you can deploy it to.

16
00:00:47,660 --> 00:00:51,020
OK. So to start with
we're going to talk about

17
00:00:51,070 --> 00:00:53,870
actually hosting in ASP.NET Core

18
00:00:53,950 --> 00:00:56,880
and you know
an interesting thing here is that

19
00:00:56,960 --> 00:01:00,140
ASP.NET Core is actually
hosted using Kestrel.

20
00:01:00,220 --> 00:01:04,410
OK, And Kestrel is a
lightweight Web Server package,

21
00:01:04,480 --> 00:01:06,650
it's actually a NuGet package

22
00:01:06,720 --> 00:01:11,560
that I add to my application
that kind of turns on HTTP serving.

23
00:01:11,680 --> 00:01:16,320
OK, so I manage HTTP server
that lives inside of my application.

24
00:01:16,410 --> 00:01:21,120
So, the kind of the common things
to any environment is

25
00:01:21,210 --> 00:01:24,110
you'll set up a host and then once you

26
00:01:24,170 --> 00:01:29,040
you will publish, you know
your application to a folder on there,

27
00:01:29,100 --> 00:01:31,580
you'll set-- you'll have a process manager

28
00:01:31,660 --> 00:01:35,080
that's going to make sure that
my application continues running.

29
00:01:35,150 --> 00:01:39,180
OK. And then I'm going to have a
reverse proxy that's going to send the

30
00:01:39,240 --> 00:01:40,840
traffic back to me. OK.

31
00:01:40,910 --> 00:01:43,210
So that whole thing about you know,

32
00:01:43,280 --> 00:01:46,140
how I'm actually publishing and I'm how my

33
00:01:46,220 --> 00:01:51,120
application is hosting itself
is, this is done using Kestrel

34
00:01:51,180 --> 00:01:53,720
so to see this in action let's take a look at

35
00:01:53,770 --> 00:01:57,180
a default project
this is just File, New Project. OK.

36
00:01:57,260 --> 00:02:00,030
And I've got-- if I look in my

37
00:02:00,120 --> 00:02:04,880
NuGet packages,
I've got the AspNetCoreAll meta package.

38
00:02:04,960 --> 00:02:07,660
Sure. And if I expand this out
somewhere in that list

39
00:02:07,720 --> 00:02:11,020
we've got Kestrel, so if I--

40
00:02:11,100 --> 00:02:14,430
So, you actually don't need to install

41
00:02:14,480 --> 00:02:18,040
kestrel in your application
File, New web is going to have

42
00:02:18,140 --> 00:02:20,080
Kestrel enabled by default. Right,

43
00:02:20,160 --> 00:02:23,200
because that package is
included as part of that

44
00:02:23,260 --> 00:02:28,720
AspNetCore.All meta package that has
everything in the kitchen-sink. Yep,

45
00:02:28,780 --> 00:02:31,580
and I could actually
just create a console application

46
00:02:31,630 --> 00:02:33,850
and then add this Kestrel package

47
00:02:33,900 --> 00:02:36,620
and my application is now
a web app. Oh! cool. Right,

48
00:02:36,670 --> 00:02:38,400
so that's pretty neat.

49
00:02:38,480 --> 00:02:41,040
So if we-- if we hop back out of there

50
00:02:41,080 --> 00:02:42,910
and we look at our Startup,

51
00:02:42,960 --> 00:02:49,580
so excuse me our program CS.
What we've got here is

52
00:02:49,640 --> 00:02:52,490
the actual spinning up Kestrel

53
00:02:52,570 --> 00:02:56,730
and you mentioned, if you could
start a console application

54
00:02:56,780 --> 00:02:59,900
and add the web server to it
this looks like a normal

55
00:02:59,980 --> 00:03:02,460
static void main for a console application.

56
00:03:02,540 --> 00:03:06,000
It completely is-- oh!
No trickery at all this is literally

57
00:03:06,060 --> 00:03:08,990
a console app that has some additional

58
00:03:09,040 --> 00:03:12,270
NuGet packages added
and because of that

59
00:03:12,360 --> 00:03:16,410
we've got Microsoft ASPNetCore Hosting

60
00:03:16,540 --> 00:03:19,470
and that's able to run Kestrel and host

61
00:03:19,520 --> 00:03:23,320
our application. Cool!
So, in previous releases

62
00:03:23,390 --> 00:03:27,230
before Asp.NetCore2,
there was a lot more code in here.

63
00:03:27,290 --> 00:03:31,070
And it was pretty much boilerplate
you always did the same things

64
00:03:31,130 --> 00:03:34,240
you always said here use--
you know, use these environment settings

65
00:03:34,300 --> 00:03:37,770
and do this and do that.
So what they've done and I like this

66
00:03:37,820 --> 00:03:40,590
it's definitely simplified things
quite a bit for me is

67
00:03:40,670 --> 00:03:43,350
they've got a default web host builder

68
00:03:43,440 --> 00:03:46,080
you'll see here
a WebHost CreateDefaultBuilder

69
00:03:46,160 --> 00:03:48,930
and for the most part I can just

70
00:03:49,050 --> 00:03:51,560
use this and go on about my merry way.

71
00:03:51,660 --> 00:03:53,870
If I do want to go in and configure things,

72
00:03:53,920 --> 00:03:57,160
I can you know just type dot
and then I can start

73
00:03:57,230 --> 00:03:58,620
you know I can go in here

74
00:03:58,720 --> 00:04:01,160
and I can configure specifics about

75
00:04:01,230 --> 00:04:05,720
how things work. But for the most part
I can start with this default

76
00:04:05,790 --> 00:04:10,230
WebHostBuilder and I'm pretty sad.
Cool! If I do want to

77
00:04:10,350 --> 00:04:13,350
dig into what else is available in the

78
00:04:13,450 --> 00:04:17,190
GitHub AspNet Hosting repo, there's a

79
00:04:17,260 --> 00:04:20,820
sample which has some additional hosting

80
00:04:20,970 --> 00:04:23,720
configurations. So, here's one

81
00:04:23,850 --> 00:04:27,000
where they show
for instance if I want to point

82
00:04:27,050 --> 00:04:30,410
other URLs if I want to say, I want my

83
00:04:30,460 --> 00:04:33,390
application to respond to you know,

84
00:04:33,480 --> 00:04:37,180
5000 and 5001 or you know
if I want to respond

85
00:04:37,280 --> 00:04:41,130
only to this on HTTPs or other things.

86
00:04:41,210 --> 00:04:43,430
This is an example of
how I could go in and do that

87
00:04:43,520 --> 00:04:46,010
so I'm just dotting in and adding

88
00:04:46,060 --> 00:04:48,990
and making additional calls
to the WebHostBuilder. Cool!

89
00:04:49,050 --> 00:04:51,440
And for an example, taking this even further

90
00:04:51,530 --> 00:04:54,600
this is one where there-- it's a sample

91
00:04:54,680 --> 00:04:57,960
where it's doing all kinds of
additional configuration adding

92
00:04:58,040 --> 00:05:00,480
in specific configuration steps,

93
00:05:00,600 --> 00:05:03,960
we're doing things like
using a specific ContentRoot

94
00:05:04,060 --> 00:05:07,680
so this the ContentRoot is
where my www Root folder

95
00:05:07,760 --> 00:05:10,560
points to-- OK.
And I could point this somewhere else,

96
00:05:10,620 --> 00:05:13,770
right? Here we're doing
some additional UseUrls

97
00:05:13,850 --> 00:05:19,110
one for HTTP and one for HTTPS.
You can encode, you

98
00:05:19,180 --> 00:05:22,600
could set a different
development environment, you know

99
00:05:22,650 --> 00:05:26,560
just all kinds of different things.
So here we're configuring services

100
00:05:26,620 --> 00:05:29,790
in line here. Your services are
normally configured

101
00:05:29,870 --> 00:05:32,400
in a Startup class, but if you look at it

102
00:05:32,440 --> 00:05:36,220
if we go back over to it in here
this when this calls

103
00:05:36,280 --> 00:05:38,610
use Startup, that's actually

104
00:05:38,720 --> 00:05:42,000
just a convention for like a nice way to

105
00:05:42,060 --> 00:05:44,610
clean up my program CS, so all the code

106
00:05:44,670 --> 00:05:46,970
isn't in there, right? So I really could

107
00:05:47,040 --> 00:05:50,570
configure inline here if I had to need to.

108
00:05:50,650 --> 00:05:52,460
So this is an example of doing

109
00:05:52,520 --> 00:05:57,020
that sort of thing. So, here in this

110
00:05:57,100 --> 00:05:58,910
example they're using a fake server

111
00:05:58,960 --> 00:06:02,700
and that's just for testing, you know
they're running a local one, there's

112
00:06:02,750 --> 00:06:06,280
other options
there's things like this HttpSys server.

113
00:06:06,360 --> 00:06:11,740
Right, so that's built on top of the
Http.Sys kernel mode driver

114
00:06:11,820 --> 00:06:14,750
inside of Windows that will serve

115
00:06:14,810 --> 00:06:18,620
web interactions, web--
web concerns from there,

116
00:06:18,700 --> 00:06:21,440
very cool to give you all the power of

117
00:06:21,530 --> 00:06:26,110
Windows web serving
using a new server that's built

118
00:06:26,170 --> 00:06:28,320
with .NET completely managed

119
00:06:28,380 --> 00:06:31,560
and running here inside of your
AspNetCore app.

120
00:06:31,610 --> 00:06:33,330
Cool! So to summarize

121
00:06:33,440 --> 00:06:35,390
what we've covered so far, we've got a

122
00:06:35,450 --> 00:06:37,800
NuGet package called Kestrel, we are

123
00:06:37,900 --> 00:06:42,000
pulling it into our application
which really was just a console app

124
00:06:42,090 --> 00:06:44,730
and then we said pull in this
NuGet package

125
00:06:44,780 --> 00:06:49,160
and then configure it and now
my console application is a web server.

126
00:06:49,230 --> 00:06:52,530
Pretty cool!
pretty neat! So now that we've got

127
00:06:52,620 --> 00:06:55,850
that, we can look at
where are we going to deploy this to.

128
00:06:55,900 --> 00:06:58,570
And as I mentioned before there's--

129
00:06:58,670 --> 00:07:00,970
those steps to it, so number one we've got our

130
00:07:01,040 --> 00:07:05,400
host setup then there are other things

131
00:07:05,500 --> 00:07:08,640
that you know, now we want to
get this out on to them and run them.

132
00:07:08,720 --> 00:07:11,000
So, we publish to a folder

133
00:07:11,050 --> 00:07:15,580
and you know if I right click
publish in Visual Studio

134
00:07:15,660 --> 00:07:17,550
or if I publish using that

135
00:07:17,600 --> 00:07:20,820
like the Azure tools etc, a lot of those

136
00:07:20,910 --> 00:07:22,380
things are kind of handled for me but

137
00:07:22,480 --> 00:07:24,210
all I need to do from command line is

138
00:07:24,320 --> 00:07:26,640
type dotnet publish and that's going to

139
00:07:26,720 --> 00:07:30,060
publish just the code
that I'm going to want to deploy.

140
00:07:30,120 --> 00:07:35,240
Alright. So after that
there's kind of different steps for the

141
00:07:35,370 --> 00:07:38,620
different environments as far as
how my process is monitored?

142
00:07:38,700 --> 00:07:41,120
And what the reverse proxy is,

143
00:07:41,200 --> 00:07:45,530
how it's actually how, what the
web server is it's kind of feeding

144
00:07:45,600 --> 00:07:47,310
things into Kestrel. Right, so that

145
00:07:47,390 --> 00:07:52,240
reverse proxy is a front-end
commercial-grade web server

146
00:07:52,320 --> 00:07:55,890
like Apache, Nginx or IIS
that's going to receive

147
00:07:56,030 --> 00:08:00,048
those initial requests, maybe it'll
handle those SSL interactions

148
00:08:00,110 --> 00:08:02,700
any kind of other security concerns

149
00:08:02,770 --> 00:08:05,500
and then turn around
and submit that request back

150
00:08:05,550 --> 00:08:07,920
to Kestrel much the same way that folks in--

151
00:08:07,980 --> 00:08:09,790
in the node environment use Express.

152
00:08:09,840 --> 00:08:12,360
Exactly and then you know, my application

153
00:08:12,410 --> 00:08:14,790
is concerned with just serving HTTP

154
00:08:14,840 --> 00:08:17,400
and all those kind of other higher-level

155
00:08:17,450 --> 00:08:19,320
things that I may want to do and you know

156
00:08:19,370 --> 00:08:22,540
like you said a commercial-grade
web server I can handle that stuff there.

157
00:08:22,610 --> 00:08:25,740
So as we kind of go through some of the

158
00:08:25,790 --> 00:08:27,600
different options for deploying.

159
00:08:27,660 --> 00:08:32,440
So IIS, there's actually
this is a long article

160
00:08:32,490 --> 00:08:36,010
here about setting up IIS and there are

161
00:08:36,059 --> 00:08:39,659
a decent amount of steps to this which is

162
00:08:39,710 --> 00:08:42,890
one reason honestly, that I like
deploy into Azure because I can just

163
00:08:42,940 --> 00:08:44,970
push at Azure and let them
worry about that. Let them

164
00:08:45,020 --> 00:08:47,390
configure for you and they take all those

165
00:08:47,440 --> 00:08:50,650
predefined defaults the
best practices for you. Yep!

166
00:08:50,700 --> 00:08:55,710
And handle things like you know,
Windows Update, yes.

167
00:08:55,770 --> 00:08:57,610
But so these are kind of the examples

168
00:08:57,660 --> 00:09:00,480
here this is walking through me
through setting up IIS.

169
00:09:00,540 --> 00:09:05,920
There is an ASP NET Core,
so there's a-- what is it .NET Core

170
00:09:05,980 --> 00:09:09,180
Windows Server Hosting bundle
and this is an exe.

171
00:09:09,230 --> 00:09:10,840
This is something that I would install

172
00:09:10,890 --> 00:09:13,210
on my server my web server and it'll

173
00:09:13,260 --> 00:09:15,900
actually go through
and configure things for me.

174
00:09:15,950 --> 00:09:18,180
So if you were setting up a VM in

175
00:09:18,230 --> 00:09:20,640
Azure or if you had an on-prem server

176
00:09:20,690 --> 00:09:24,810
that you were configuring IIS on to also

177
00:09:24,860 --> 00:09:27,500
have .NET Core hosting you would use

178
00:09:27,550 --> 00:09:29,840
this .NET Core Windows Server
Hosting bundle.

179
00:09:29,890 --> 00:09:32,100
to put down those features from

180
00:09:32,150 --> 00:09:35,180
ASP.NET Core we need in
order to host a website.

181
00:09:35,230 --> 00:09:37,230
Exactly! So the way this is done

182
00:09:37,280 --> 00:09:40,010
in IIS after I've installed that is it's

183
00:09:40,060 --> 00:09:43,150
actually using this ASP.NET Core module.

184
00:09:43,200 --> 00:09:45,720
And the ASP NET Core module is actually

185
00:09:45,770 --> 00:09:48,920
doing this proxy for me. So if we look at it

186
00:09:48,970 --> 00:09:50,840
here's the internet IIS is that

187
00:09:50,900 --> 00:09:52,890
front end and it's actually got this

188
00:09:52,960 --> 00:09:55,130
core module that it's running and that

189
00:09:55,180 --> 00:09:57,120
core module is calling back into my

190
00:09:57,170 --> 00:09:59,390
application. And then as we see here,

191
00:09:59,440 --> 00:10:01,880
here's my application and it's actually

192
00:10:01,930 --> 00:10:04,130
got Kestrel as kind of the front end

193
00:10:04,180 --> 00:10:05,730
that's calling back and forth into my

194
00:10:05,780 --> 00:10:08,930
application code. Cool! So yeah, so this is

195
00:10:08,980 --> 00:10:10,680
really interesting and of course this is

196
00:10:10,730 --> 00:10:14,540
like I said this is installed by that
server install thing for me.

197
00:10:14,590 --> 00:10:17,260
So that will kind of
set it up for me with IIS.

198
00:10:17,390 --> 00:10:19,560
So that that's how it's done there

199
00:10:19,610 --> 00:10:21,300
and that's kind of the main way that you're

200
00:10:21,350 --> 00:10:24,510
going to be doing this. There are
some other options available though.

201
00:10:24,610 --> 00:10:27,740
There's the option to
host in a Windows service

202
00:10:27,810 --> 00:10:30,270
which is pretty neat. So there's actually

203
00:10:30,320 --> 00:10:34,760
a package that I'm-- I'm able to install

204
00:10:34,830 --> 00:10:36,750
that can set that up. This is the

205
00:10:36,800 --> 00:10:41,710
Microsoft.AspNet.Core.Hosting.WindowsServices

206
00:10:41,760 --> 00:10:48,240
package and so if I add that
into my application here, so you'll

207
00:10:48,290 --> 00:10:51,080
see this is-- this is you know, got that

208
00:10:51,130 --> 00:10:54,270
pulled in and then it's actually pretty

209
00:10:54,320 --> 00:11:01,350
similar on start. There's a few things,
we're doing here we're saying the

210
00:11:01,400 --> 00:11:03,790
very simplest case is you
basically run it

211
00:11:03,840 --> 00:11:06,140
and it's-- it's configured as a service.

212
00:11:06,190 --> 00:11:10,000
However, a lot of the time
I want to actually be

213
00:11:10,050 --> 00:11:12,320
able to debug it and build you know like

214
00:11:12,370 --> 00:11:14,570
I want as I'm-- as I'm developing my

215
00:11:14,620 --> 00:11:16,100
application I want to be able to kind of

216
00:11:16,150 --> 00:11:18,170
step into the code debug and all that

217
00:11:18,220 --> 00:11:20,760
kind of stuff. So kind of the recommended

218
00:11:20,810 --> 00:11:23,000
way and this is shown in the docs is to

219
00:11:23,050 --> 00:11:26,120
set it up where you can say allow it to

220
00:11:26,170 --> 00:11:28,340
run in dual mode either as a console app

221
00:11:28,410 --> 00:11:31,440
or as a service. OK. So the way this is

222
00:11:31,500 --> 00:11:33,380
configured here this is saying if it's

223
00:11:33,430 --> 00:11:37,640
if a debugger is attached or if I pass
in the command line arguments

224
00:11:37,710 --> 00:11:41,210
--console then set this is service to false.

225
00:11:41,260 --> 00:11:45,400
And then it runs slightly differently
if it says it's, if it is a

226
00:11:45,450 --> 00:11:48,720
service then it kind of sets--
sets things for a directory path

227
00:11:48,770 --> 00:11:53,290
the directory path is different
right and then also there's

228
00:11:53,340 --> 00:11:55,580
this host.RunAsCustomService so

229
00:11:55,630 --> 00:11:58,860
this is what's pulled in
via that NuGet package.

230
00:11:58,910 --> 00:12:03,660
So this is the standard kestrel run
but if we're running if as service

231
00:12:03,730 --> 00:12:06,080
then it does this run as custom service.

232
00:12:06,130 --> 00:12:09,100
OK. And then the way
that's registered is actually

233
00:12:09,150 --> 00:12:15,260
using this SC command. So if we take
a look I've actually got this here,

234
00:12:15,330 --> 00:12:21,600
jump over into folder and I set this up

235
00:12:21,650 --> 00:12:27,640
using a batch file and only because
this is a few lines of code to type here.

236
00:12:27,690 --> 00:12:35,260
So if we look, so this is sc create

237
00:12:35,340 --> 00:12:38,600
so that's sc is the-- the thing to kind of

238
00:12:38,650 --> 00:12:42,990
register a service, so I say sc create
the name of the service and then binPath.

239
00:12:43,120 --> 00:12:45,440
And the one thing that's-- that's a

240
00:12:45,490 --> 00:12:48,780
little interesting this binPath
I've actually used .net publish

241
00:12:48,910 --> 00:12:51,920
So in my application I--
from command-line I did

242
00:12:51,970 --> 00:12:57,470
.net publish and I-- and then I've copied
that path where the exe was published to.

243
00:12:57,520 --> 00:13:04,160
OK. So now I'm going to take this service
and I will do run as administrator

244
00:13:05,310 --> 00:13:11,820
And that's now running that's like
that was it's registered as a service

245
00:13:11,890 --> 00:13:17,520
and so now if I go to localhost 5,000,
my favorite localhost port.

246
00:13:18,650 --> 00:13:21,210
So there's my service running this is

247
00:13:21,260 --> 00:13:24,010
being hosted as a
service a Windows Service.

248
00:13:24,060 --> 00:13:27,740
So the Windows Service is handling
the you know, keeping my process

249
00:13:27,790 --> 00:13:30,380
running handling the
Start/Stop all that kind of stuff.

250
00:13:30,430 --> 00:13:35,550
So this is a lot like how we would
do those self-contained deployments

251
00:13:35,600 --> 00:13:40,860
with WCF services, back in the past.
Yep! Exactly!

252
00:13:40,940 --> 00:13:43,500
So again if I'm exposing something out on

253
00:13:43,550 --> 00:13:45,870
the internet I would generally expose

254
00:13:45,920 --> 00:13:49,170
I would use IIS, right.
Sure, but for something

255
00:13:49,230 --> 00:13:52,050
that I need to host locally have a
service that's running exposed some

256
00:13:52,100 --> 00:13:55,930
local content et cetera that's-- that's
kind of how I can set that up.

257
00:13:56,000 --> 00:14:02,220
So yeah and that's-- that sample is out that's
actually linked to from the docs here.

258
00:14:02,270 --> 00:14:04,410
OK. So relatively straightforward

259
00:14:04,460 --> 00:14:07,610
and that sc I was honestly
kind of surprised when I

260
00:14:07,680 --> 00:14:12,570
you know, did the sc running
through this sc service add and it just

261
00:14:12,620 --> 00:14:14,670
kind of worked sc create so

262
00:14:14,720 --> 00:14:16,920
and then at the end also
you'll want to go through

263
00:14:16,970 --> 00:14:22,700
and clean it up, remove it
and that's there's an sc delete

264
00:14:22,800 --> 00:14:28,640
To do that you stop it and delete it.
So that is those, so the

265
00:14:28,690 --> 00:14:32,380
one other thing I kind of wanted to
touch on and this is a bigger you know,

266
00:14:32,430 --> 00:14:35,260
thing I'm just going to point you
in the direction to get started

267
00:14:35,310 --> 00:14:39,870
but is hosting on Linux.
Hosting on Linux again, you're

268
00:14:39,930 --> 00:14:43,020
configuring an entire web server you're

269
00:14:43,070 --> 00:14:46,910
setting up your process monitor
and you're doing your reverse proxy.

270
00:14:46,960 --> 00:14:50,700
OK. So there's several steps there,
I just want to point out

271
00:14:50,750 --> 00:14:53,560
I ran through this and I just
want to point out some got to

272
00:14:53,610 --> 00:14:55,470
and important things to be aware of right.

273
00:14:55,520 --> 00:14:59,100
And also some tips, so one has I went in

274
00:14:59,150 --> 00:15:01,520
and actually did this in the-- I created

275
00:15:01,570 --> 00:15:06,380
an Ubuntu VM and I did--
I did my kind of development

276
00:15:06,490 --> 00:15:10,500
on that machine as far as
kind of configuring it actually use the

277
00:15:10,550 --> 00:15:13,230
Cloud Shell. So this Cloud Shell you-- you

278
00:15:13,280 --> 00:15:15,160
can just bring up by clicking here.

279
00:15:15,210 --> 00:15:18,840
And this kind of launches, this little
terminal window down at the bottom.

280
00:15:18,890 --> 00:15:21,090
OK. So that's actually where I did

281
00:15:21,140 --> 00:15:28,400
my configuration in order to do
that I-- I ssh into the box. OK.

282
00:15:28,450 --> 00:15:31,330
So I actually just you know, copy I

283
00:15:31,380 --> 00:15:33,190
it's in the-- in the directions as far as

284
00:15:33,250 --> 00:15:35,880
how to do it but I ssh into the box

285
00:15:35,950 --> 00:15:39,180
and then they walk you
through installing.

286
00:15:39,230 --> 00:15:44,400
Now you can install the full SDK
but actually what's recommended

287
00:15:44,490 --> 00:15:47,500
is to install just the runtime.
Sure, or you don't want

288
00:15:47,550 --> 00:15:50,350
to install the whole SDK on
your server though you don't need it.

289
00:15:50,400 --> 00:15:53,520
And-- and you want to
kind of have a light-tight

290
00:15:53,580 --> 00:15:56,170
install right. So when you go to the

291
00:15:56,220 --> 00:15:59,260
downloads and kind of the default it's

292
00:15:59,310 --> 00:16:01,390
going to point you to is SDK.

293
00:16:01,440 --> 00:16:06,640
If you click on runtime then you can
scroll down and you can see here Linux

294
00:16:06,704 --> 00:16:10,500
installing .NET Core on Linux.
And then here

295
00:16:10,560 --> 00:16:15,600
be careful that you read the
Version Number. So this is .NET core 1.1.4 (LTS).

296
00:16:15,715 --> 00:16:17,733
It's long term support right.

297
00:16:18,020 --> 00:16:21,697
So, you actually do if you want .NET Core 2
you want to scroll down to current.

298
00:16:22,000 --> 00:16:24,231
And then for these it's-- it's literally just

299
00:16:24,400 --> 00:16:28,816
sudo apt-get you know, you have to
configure the sources for it first.

300
00:16:29,164 --> 00:16:34,711
So those sources are these
standard ones here.

301
00:16:35,040 --> 00:16:37,920
So, if you go downloads .NET Core

302
00:16:38,213 --> 00:16:40,373
and then you click on Linux.

303
00:16:41,991 --> 00:16:44,088
You're still going to need to
make sure that

304
00:16:44,168 --> 00:16:47,315
for whatever your environment is that
you've done your apt-get.

305
00:16:47,480 --> 00:16:50,820
You know to you like you've
configured your sources for apt-get

306
00:16:50,920 --> 00:16:53,160
Right! So I went through and then you know,

307
00:16:53,280 --> 00:16:56,960
registered the Microsoft Signature
you know go through

308
00:16:57,260 --> 00:17:02,000
and then install-- install
the apt-get using this.

309
00:17:02,080 --> 00:17:04,060
However, when I got to this line here

310
00:17:04,180 --> 00:17:06,790
where-- where you would run the entire SDK

311
00:17:06,920 --> 00:17:09,599
that's where instead you
install that runtime. OK.

312
00:17:09,700 --> 00:17:11,240
That makes sense. Yeah! So that's--

313
00:17:11,319 --> 00:17:14,260
that's kind of the main thing
as far as how you deploy.

314
00:17:14,460 --> 00:17:17,420
Obviously, you know I recommend
still deploying using

315
00:17:17,480 --> 00:17:20,260
continuous integration
using some sort of like

316
00:17:20,420 --> 00:17:23,339
deploy from GitHub or that kind of
thing that's kind of nice

317
00:17:23,400 --> 00:17:26,060
to configure that.
When you're in development

318
00:17:26,240 --> 00:17:28,220
one nice thing that you can do

319
00:17:28,300 --> 00:17:33,620
if you're developing on Windows you can
actually use Bash Ubuntu on Windows.

320
00:17:33,680 --> 00:17:37,320
So, I went through and you know

321
00:17:37,440 --> 00:17:44,520
locally did this on my machine
you know .NET and I actually have .NET cd

322
00:17:50,480 --> 00:17:53,420
and so I did through here .NET publish,

323
00:17:54,140 --> 00:18:01,500
so it's-- it's in a sub-directory
off a bin, cd bin

324
00:18:03,900 --> 00:18:05,960
debug and then down underneath

325
00:18:06,040 --> 00:18:09,080
its several levels but there's
a published directory right.

326
00:18:09,260 --> 00:18:13,420
And then as far as how you get your
files out on your production server

327
00:18:13,560 --> 00:18:16,560
what I did locally in development
is use scp.

328
00:18:16,840 --> 00:18:19,680
There's information in the docs
about how to do that?

329
00:18:19,940 --> 00:18:24,280
and so basically rp is recursive
I saw I'm pointing to

330
00:18:24,320 --> 00:18:27,456
a directory I'm saying scp
from this local directory

331
00:18:27,792 --> 00:18:32,416
to my-- my azure VM's directory.

332
00:18:32,464 --> 00:18:35,696
And I just created an app directory
and did you know scp

333
00:18:35,770 --> 00:18:38,576
just copy to that. Yeah, that's kind
of a standard you know,

334
00:18:38,768 --> 00:18:41,584
way to deploy or to copy files up.

335
00:18:41,632 --> 00:18:44,352
So, once I had that in place then that's

336
00:18:44,400 --> 00:18:46,944
my applications are running
on that server. OK.

337
00:18:47,120 --> 00:18:52,656
So then to actually run it start and hit
you know and then just the DLL name. Right!

338
00:18:52,736 --> 00:18:56,120
After that though you're not done
because remember you've got to go through,

339
00:18:56,288 --> 00:18:59,776
and do all the actual
hosting steps in here so,

340
00:18:59,952 --> 00:19:02,000
you're actually just your application

341
00:19:02,064 --> 00:19:04,460
has copied up there but now
you've got to have

342
00:19:05,020 --> 00:19:09,312
your monitoring and you also need
to handle your reverse proxy.

343
00:19:09,616 --> 00:19:11,696
So we're not going to go through
all that now I'm just

344
00:19:11,808 --> 00:19:14,976
showing you kind of the basics of how to
get started and how to get it.

345
00:19:15,040 --> 00:19:19,232
You know get it running and can
and important considerations

346
00:19:19,312 --> 00:19:23,264
you've got. Sure, ok.
So we have covered

347
00:19:23,310 --> 00:19:27,648
starting with the basics of
how your application is hosted itself.

348
00:19:27,680 --> 00:19:30,736
How kestrel is running
your application or is

349
00:19:30,880 --> 00:19:34,592
enabling HTTP serving inside
your application, right?

350
00:19:34,720 --> 00:19:36,448
And we looked at how you configure that,

351
00:19:36,480 --> 00:19:38,704
how you can set up some of the
different kestrel options?

352
00:19:38,910 --> 00:19:41,168
You've got your default web host builder

353
00:19:41,248 --> 00:19:44,400
to start with but you can go through
and configure a lot of different things

354
00:19:44,480 --> 00:19:46,352
and we looked at some sample code for that.

355
00:19:46,688 --> 00:19:49,936
After that we looked at how
we're deploying to a few different

356
00:19:50,064 --> 00:19:52,544
hosting environments so we looked at IIS,

357
00:19:53,424 --> 00:19:55,968
We looked at hosting locally
as a Window Servers,

358
00:19:56,096 --> 00:19:59,008
we looked at some kind
of things to be aware of for

359
00:19:59,232 --> 00:20:02,112
deploying to Ubuntu as well. Cool!

360
00:20:02,576 --> 00:20:05,776
Alright! We covered a lot there,
I learned a lot about

361
00:20:05,840 --> 00:20:08,368
hosting an ASP.NET Core Servers.

362
00:20:09,104 --> 00:20:10,760
Thanks so much for joining us.

363
00:20:10,880 --> 00:20:13,104
I hope you follow up with
some of the other videos

364
00:20:13,152 --> 00:20:16,096
that we have in our
ASP.NET Core Series for you.

